		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Naftali Harris <naftali@stanford.edu>
Luke Pappas <lpappas9@stanford.edu>
Connor Woodson <cwoodson@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We start by taking our passed in executable string and copying it
onto a temporary page of memory. We copy it at byte 8, leaving us
two bytes in the front which we will use later. We iterate through the
string and replace spaces with \0's (NOTE: as it's not said anywhere,
I have ignored the shell behavior of using quotes to have an argument
that contains spaces). Now what we have is a series of null-terminated
strings, each one of which is an argument of our new process. We use
the first byte to point to the end of our list of arguments (the last
\0), and we use the second byte to store a count of how many arguments.
We do this work manually instead of using strtok_r. We could use the
library call, which would do almost all of the same work for us, but
there is one issue with the call that made us decide going without it
is easier: if you have multiple spaces in a row, it will only replace
the fist of those spaces with a \0.

This page of data is passed to the start_process function, which is
invoked in the creation of the new thread. After the executable is
loaded for the new thread and the stack is created, we start writing
our arguments to it. Using the first byte from the temp page, we look
at the final \0 of our arguments and start copying byte-by-byte from
there. If there are multiple \0 in a row, we only write one of them
(this is the case of multiple spaces between arguments). We keep
track of the beginning of each argument. After we have written all
of them, we write a null pointer, and then we write the pointers to
each argument. As we've started from the end of our temp page,
we've written the arguments so that the last is on top of our stack,
as it should be. We write the pointers thus in the correct manner.
These pointers make up argv[]. We then write argv to point to
argv[0], followed by argc (the number of arguments) and then a null
pointer to represent our return address.

To avoid overflowing the stack page, our first precaution is that
the argument string must fit within our temporary page. This means
that its length must be <= PGSIZE-8. Then.........................

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r is a reentrant version of strtok, meaning that it saves its
state in a passed-in variable as opposed to in a global variable.
This makes the function thread safe. Using strtok prevents two threads
from using the function at the same time, less they overwrite each
other's progress. strtok_r makes each call independent, and prevents
any issue of thread conflict or race conditions.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

One advantage of the Unix approach is the ability to have shell
specific functionality. For instance using variables in arguments.
It is easy for a shell to keep track of its own list of variables,
and then to substitute them in as arguments in the proper circumstance.
For example, it becomes trivial for a shell to parse the following
command and convert it into an execve call:
echo $PATH
whereas a kernel cannot appropriately handle that.

Another advantage is that shells can define unique behaviour such as
deciding what should or should not be considered an executable command.
For instance when setting environment variables. A shell can easily
implement the below behavior:
PATH="~"
which again becomes tricky when you rely on passing all commands
to the kernel.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef int pid_t;
Purpose: represent the process id type in the same way as the thread

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

To begin, we note that file descriptors are unique within a single 
process. 

To implement the notion of open files within a program, we defined 
the struct file_package. This struct allows us to track all 
pertinent information for a processes open file in a single location. 
Furthermore, these structs contain a list_elem, which allows these
file_packages to be placed in a list. 

Every process contains a list of file_packages, and an int fd_counter.
The fd_counter is set initially to 2, to account for STD_IN and 
STD_OUT. When a file is opened, that file receives the current value
of fd_counter in the thread. Then, fd_counter is incremented. In this
way, every opened file gets a new and unique file descriptor. 

The file descriptor is unique to an open call for a specific file.
As stated in the spec, the file position of a given file may not
consistent across all fd's for a given file. Therefore, we track 
a file position within the file_package struct as well, which 
associated with the unique fd. 

It is important to note that we do not recycle used file descriptors
after they have been closed. We do this for the following reasons:
1. You can imagine a user program that requests to open a file, 
receives a file descriptor, and then closes the file. Later the 
program opens another file, and receives the recycled fd. However,
the coder, in a lapse of judgement, mistakenly associates the new
fd with the closed file. In this case, the recycled fd will now be
valid, only it will be associated with a different file, thus
making the error harder to catch. Thus, we make fd's unique for each 
call to open. 
2. If we were to recycle fd's it would require more code and some
sort of Data structure. This will inevitably come at a cost. 
3. As posted on the course group page, we assume that no user program
will ever open more than INT_MAX -2 files. Given this assumption, 
there is no reason to recycle fd's, considering the cost of point 2, 
and the potential debugging issues of point 1. 


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Reading and writing user data in the kernel is incredibly dangerous, 
because the user data could be null, in an unmapped region, or
not in the user's space. In each of these cases, we have to take
precaution to ensure that we do not 



>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

max of 2


What is this asking?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

- NEED TO ADD LOCK TWO LOCKS AROUND PARENT_IS_FINISHED AND CHILD_IS_FINISHED


Do we do this effectively? 

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?


What is this asking? 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We didn't change it. Should we have?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
