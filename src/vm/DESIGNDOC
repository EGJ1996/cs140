       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Naftali Harris <naftali@stanford.edu>
Luke Pappas <lpappas9@stanford.edu>
Connor Woodson <cwoodson@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct spte
{
    struct hash_elem elem;  /* For the per-process list */
    page_location location; /* Type of spte */
    struct thread* owner_thread; /* needed to access pd */
    void* page_id;          /* The virtual address */
    struct frame* frame;    /* the physical frame of the page if it is memory */
    
    bool is_writeable;      /* true if the page can be written to */
    bool is_loaded;         /* true if the page is currently loaded in memory */
           
    struct file* file_ptr;  /* File this page is backed by, (if relevant) */
    off_t offset_in_file;   /* Position in file this page comes from */
    uint32_t read_bytes;    /* Bytes to read from this file */
    uint32_t zero_bytes;    /* Bytes to zero from this file */
    
    uint32_t swap_index;    /* index into the swap sector */
    
};

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Define the mapid_t type */
typedef int32_t mapid_t;

/* State keeping track of each mmapped file.
 * Note that multiple calls to mmap generate new mmap_states, even if the same
 * file was mmapped. */
struct mmap_state
{
    struct list_elem elem;  /* For the per-process list of mmapped files */
    struct file *fp;        /* The mmapped's owned reference to the file */
    void *vaddr;            /* Virtual address where the mmapped file begins */
    mapid_t mapping;        /* The per-process mapping id */
};

struct thread
{
    ...

    /* Next mapid_t to use */
    mapid_t mapid_counter;

    /* List of mmapped files */
    struct list mmapped_files;

    ...
}

Also relevant is the struct spte, (the supplementary page table entry), which
you can find in section A1.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

In our supplementary page table, one of the types of spte we have is the
MMAPPED_PAGE type. This allows us to distinguish mmapped pages from other kinds
of pages, like swap pages and read-only file pages. When there is a page fault
attempting to read or write an mmapped page, we simply read the page in from
its location in the file, as determined by the spte that governs the particular
page. To evict an mmapped page, we simply check if it is dirty, and if so,
write it back to its location in the file as determined by the spte. Of course,
we are careful to keep track of the number of bytes that need to be read and
the number of bytes that must be zeroed, which we do in the spte.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Each virtual page owned by a user process is associated with an spte, and for
each process, we keep track of all spte's in the per-thread spte_table. Thus,
to make sure that the new file mapping does not overlap with any existing
segment, we check all of the page addresses that we'd need for the mmap to see
 if they are in our spte table, (that is, already used by the process for some
other reason). Since the spte table is a hash table, this takes time linear in
the number of pages that the mmap would need. Only after this check do we
complete the mmap by adding the new mmap spte's to the process's spte_table.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We do share some of the same implementations. For loading an mmap page into
physical memory, or for loading an executable page from memory, in both cases
we simply need to take the page from its location in the particular file and
then copy it into the memory buffer. So we use the same code for this. However,
we do not write executable pages back to disk, or stack pages to disk, so we
needed to write a new function for evicting mmapped pages, rather than sharing
the implementation with some other type of page.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
